<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ExcelToScriptableObject</title>
    <url>//55803f34.html</url>
    <content><![CDATA[<p>Excel导入数据创建ScriptableObject</p>
<span id="more"></span>

<h1 id="ExcelToScriptableObject"><a href="#ExcelToScriptableObject" class="headerlink" title="ExcelToScriptableObject"></a>ExcelToScriptableObject</h1><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>该package是为了导入大量数据做的 使用不是很方便 需要自己改动写ScriptableObject赋值代码适配自己的需求。</p>
<h2 id="导入Package"><a href="#导入Package" class="headerlink" title="导入Package"></a>导入Package</h2><p>Assets&#x2F;Import Package&#x2F;Custom Package 选择包导入</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>首先找到脚本<strong>ExcelToScriptableObject</strong>，对方法GetScriptableObjects初始化物体赋值进行修改，每个人初始化的物体属性不同所以需要根据自己需要进行修改。package中有示例。可看后面代码详解。</p>
<p>Unity上方导航栏中找到ExcelTool，点击选择Import，出现面板如下图左一所示</p>
<p>选择需要生成的ScriptableObject，出现右图所示界面，选择想要生成的ScriptableObject</p>
<p>再选择excel，<strong>非常不建议使用xls</strong>，会出现无法初始化list等问题。</p>
<p><strong>重复导入确保删除之前的生成的ScriptableObject，否则会出现问题，如导入的数据未改变等</strong>。</p>
<p>解决方案：去文件管理器删除再重新生成</p>
<p><img src="https://cdn.jsdelivr.net/gh/forestlyn/Drawing-bed/blog/image-ExceltoScriptableObject-1.png" alt="image-ExceltoScriptableObject-1"></p>
<h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><h3 id="重写赋值部分"><a href="#重写赋值部分" class="headerlink" title="重写赋值部分"></a>重写赋值部分</h3><p><code>DataRowCollection</code>可视为二维string数组</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">DataRowCollection data = ReadExcel(excelpath, <span class="keyword">out</span> <span class="built_in">int</span> col, <span class="keyword">out</span> <span class="built_in">int</span> row, type);</span><br><span class="line"></span><br><span class="line">Item item = ScriptableObject.CreateInstance&lt;Item&gt;();<span class="comment">//创建脚本实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//给数据赋值 data[i][j]表示为excel第i行第j个格子里的内容，tostring转换为string类型 </span></span><br><span class="line"><span class="comment">//从string转int float 可用 int.TryParse float.Parse 将string类型转int float</span></span><br><span class="line">item.itemName = data[i][<span class="number">0</span>].ToString();</span><br><span class="line"><span class="built_in">int</span>.TryParse(data[i][<span class="number">1</span>].ToString(), <span class="keyword">out</span> item.times);</span><br><span class="line">item.list = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;(data[i][<span class="number">2</span>].ToString().Split(<span class="string">&#x27;;&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存第一个参数为gameobject，需要保存的物体，第二个为保存地址 注意包括保存物体的名字</span></span><br><span class="line">AssetDatabase.CreateAsset(item, <span class="string">&quot;Assets/Items/item&quot;</span> + i + <span class="string">&quot;.asset&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExcelWindow</span> : <span class="title">EditorWindow</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> ScriptableObject source;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">MenuItem(<span class="string">&quot;ExcelTool/Import&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OnInit</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//创建窗口 泛型参数为创建窗体的脚本 需要继承EditorWindow 类似挂载在物体上的脚本需要继承MonoBehaviour</span></span><br><span class="line">            <span class="comment">//第一个参数string:标题 第二个参数bool:是否聚焦 </span></span><br><span class="line">            GetWindow&lt;ExcelWindow&gt;(<span class="string">&quot;导入excel&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    	<span class="comment">//绘制UI</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnGUI</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//开始一行 和EndHorizontal配套使用</span></span><br><span class="line">            GUILayout.BeginHorizontal();</span><br><span class="line">            <span class="comment">//显示一个标签</span></span><br><span class="line">            GUILayout.Label(<span class="string">&quot;Import Excel&quot;</span>);</span><br><span class="line">            GUILayout.EndHorizontal();</span><br><span class="line"></span><br><span class="line">            GUILayout.BeginHorizontal();</span><br><span class="line">            GUILayout.Label(<span class="string">&quot;Excel/根据excel后缀选&quot;</span>);</span><br><span class="line">            GUILayout.EndHorizontal();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//第一个参数：显示一个字段前的标签 第二个参数:字段显示的对象 第三个参数:可选择的类型 第四个参数：是否可选择场景(Scene)中的对象</span></span><br><span class="line">            source = (ScriptableObject)EditorGUILayout.ObjectField(<span class="string">&quot;选择需要生成的ScriptalbeObject脚本&quot;</span>, source, <span class="keyword">typeof</span>(ScriptableObject), <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建button 点击button变为true 运行里面的代码</span></span><br><span class="line">            <span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;选择Excel/后缀为xlsx&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//打开一个文件夹 第一个参数：title 第二个：打开的路径 第三个：可选择的文件种类 适配后缀</span></span><br><span class="line">                <span class="built_in">string</span> filePath = EditorUtility.OpenFilePanel(<span class="string">&quot;选择Excel/后缀为xlsx&quot;</span>, Application.dataPath, <span class="string">&quot;*xlsx&quot;</span>);</span><br><span class="line">                ExcelToScriptableObject.GetScriptableObjects(filePath, source,ExcelType.xlsx);</span><br><span class="line">                <span class="comment">//Debug.LogError(&quot;filePath&quot;+filePath);</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;选择Excel/后缀为xls(不推荐)&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> filePath = EditorUtility.OpenFilePanel(<span class="string">&quot;选择Excel/后缀为xls&quot;</span>, Application.dataPath, <span class="string">&quot;*xls&quot;</span>);</span><br><span class="line">                ExcelToScriptableObject.GetScriptableObjects(filePath,source, ExcelType.xls);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用过程中可能出现的问题"><a href="#使用过程中可能出现的问题" class="headerlink" title="使用过程中可能出现的问题"></a>使用过程中可能出现的问题</h2><p><strong>不建议使用xls，大概出问题，做的时候用xls测试生成list完全无法生成成功 甚至string 赋值也有问题 可能是我没弄懂 总之xlsx测试就完全没问题</strong></p>
<ul>
<li><p>重新导入文件值没变化</p>
<p>删除之前生成的ScriptableObject 再重试</p>
</li>
<li><p>选择ScriptableObject 时没有我想要生成的</p>
<p>使用前需要先创建一个ScriptableObject实例，指右键Create，不是ScriptableObject C#脚本</p>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/6991464138782277645">Unity实用功能之读写Excel表格｜ 8月更文挑战 - 掘金 (juejin.cn)</a></p>
<p><a href="https://blog.csdn.net/yupu56/article/details/50580277">(31条消息) Unity Excel 文件读取和写入_PassionY的博客-CSDN博客_unity读取excel文件</a></p>
<p><a href="https://www.bilibili.com/read/cv12931265?from=search&spm_id_from=333.337.0.0">Unity知识记录–自动处理大量数据导入，生成ScriptObject（制作UI界面） - 哔哩哔哩 (bilibili.com)</a></p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>游戏工具</tag>
      </tags>
  </entry>
  <entry>
    <title>P6510</title>
    <url>//e9558fce.html</url>
    <content><![CDATA[<p>P6510 奶牛排队（RMQ）<span id="more"></span></p>
<h1 id="P6510-奶牛排队（RMQ）"><a href="#P6510-奶牛排队（RMQ）" class="headerlink" title="P6510 奶牛排队（RMQ）"></a>P6510 奶牛排队（RMQ）</h1><p><a href="https://www.luogu.com.cn/problem/P6510">P6510 奶牛排队 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>奶牛在熊大妈的带领下排成了一条直队。</p>
<p>显然，不同的奶牛身高不一定相同……</p>
<p>现在，奶牛们想知道，如果找出一些连续的奶牛，要求最左边的奶牛 A 是最矮的，最右边的 B是最高的，且 B高于 A 奶牛。中间如果存在奶牛，则身高不能和 A,B 奶牛相同。问这样的奶牛最多会有多少头？</p>
<p>从左到右给出奶牛的身高，请告诉它们符合条件的最多的奶牛数（答案可能是 0,2，但不会是 1）。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行一个正整数 N，表示奶牛的头数。</p>
<p>接下来 N行，每行一个正整数，从上到下表示从左到右奶牛的身高 hi。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行一个整数，表示最多奶牛数。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="1-过不了，太垃了"><a href="#1-过不了，太垃了" class="headerlink" title="1(过不了，太垃了)"></a>1(过不了，太垃了)</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//呜呜，最坏情况O(n*n)过不了,tle了一个点</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100005</span>] = &#123;&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">  <span class="type">int</span> ans = find(a, n);</span><br><span class="line">  <span class="keyword">if</span> (ans == <span class="number">1</span>)</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> left, right, ans = <span class="number">0</span>;</span><br><span class="line">  left = right = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (a[i] &gt; a[right]) <span class="comment">//读取的下一数大于最右边的数</span></span><br><span class="line">      right = i;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a[i] &lt;= a[left]) <span class="comment">//读取下一个数小于等于最左边的数</span></span><br><span class="line">      left = right = i;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a[left] &lt; a[i] &amp;&amp; a[right] &gt;= a[i]) <span class="comment">//读取的下一个数在两者之间,较复杂</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//后面存在比最右边大的数且不存在比最左边小的数则right等于改变为那个数</span></span><br><span class="line">      <span class="comment">//否则重新从now开始</span></span><br><span class="line">      <span class="type">int</span> flag = <span class="number">0</span>, now = i;</span><br><span class="line">      <span class="keyword">for</span> (; i &lt; n; i++)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; a[right])</span><br><span class="line">        &#123;</span><br><span class="line">          right = i;</span><br><span class="line">          flag = <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt;= a[left])</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">        left = right = now;</span><br><span class="line">      i = now;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = ans &gt; (right - left + <span class="number">1</span>) ? ans : right - left + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-RMQ"><a href="#2-RMQ" class="headerlink" title="2(RMQ)"></a>2(RMQ)</h3><p>区间最值查询，先做预处理求最值 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">max[i][j]是从i个数开始包括i在内1&lt;&lt;j个数的最大值，min同理</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">themin</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; y)</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">themax</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; y)</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//max[i][0],min[i][0]就是数组中的a[i]的值,本质是动态规划</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">rmq</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i, j;</span><br><span class="line">  <span class="keyword">for</span> (j = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; j) &lt;= n; j++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt; n; i++)<span class="comment">//保证不越界</span></span><br><span class="line">    &#123;</span><br><span class="line">      max[i][j] = themax(max[i][j - <span class="number">1</span>], max[i + <span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>)][j - <span class="number">1</span>]);</span><br><span class="line">      min[i][j] = themin(min[i][j - <span class="number">1</span>], min[i + <span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>)][j - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>rmq区间二分，找到当前区间的序列，继续二分</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">rmq</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100005</span>] = &#123;&#125;;</span><br><span class="line"><span class="type">int</span> max[<span class="number">100005</span>][<span class="number">20</span>] = &#123;&#125;;</span><br><span class="line"><span class="type">int</span> min[<span class="number">100005</span>][<span class="number">20</span>] = &#123;&#125;; <span class="comment">//max min 里面存放最值的位置</span></span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">themin</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (a[x] &lt; a[y])</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">themax</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (a[x] &gt;= a[y])</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">minpos</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> k = <span class="built_in">log</span>(right - left + <span class="number">1</span>) / <span class="built_in">log</span>(<span class="number">2</span>);<span class="comment">//一定要除log(2),骂骂咧咧,搞半天错在这里</span></span><br><span class="line">  <span class="keyword">return</span> themin(min[left][k], min[right + <span class="number">1</span> - (<span class="number">1</span> &lt;&lt; k)][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">maxpos</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> k = <span class="built_in">log</span>(right - left + <span class="number">1</span>) / <span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">return</span> themax(max[left][k], max[right + <span class="number">1</span> - (<span class="number">1</span> &lt;&lt; k)][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    max[i][<span class="number">0</span>] = min[i][<span class="number">0</span>] = i;</span><br><span class="line">  &#125;</span><br><span class="line">  rmq(n);</span><br><span class="line">  find(<span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (ans == <span class="number">1</span>)</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">rmq</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i, j;</span><br><span class="line">  <span class="keyword">for</span> (j = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; j) &lt;= n; j++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      max[i][j] = themax(max[i][j - <span class="number">1</span>], max[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">      min[i][j] = themin(min[i][j - <span class="number">1</span>], min[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (right &lt;= left)<span class="comment">//左端点大于等于右端点，结束</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="type">int</span> l = minpos(left, right);</span><br><span class="line">  <span class="type">int</span> r = maxpos(left, right);</span><br><span class="line">  <span class="keyword">if</span> (l &lt;= r)<span class="comment">//当前区间有合法最大最小的序列解，当前序列不可能存在于其它序列中，二分</span></span><br><span class="line">  &#123;</span><br><span class="line">    ans = ans &gt; r - l + <span class="number">1</span> ? ans : r - l + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// printf(&quot;%d %d %d\n&quot;, l, r, ans);</span></span><br><span class="line">    <span class="comment">// getchar();</span></span><br><span class="line">    find(left, l - <span class="number">1</span>);</span><br><span class="line">    find(r + <span class="number">1</span>, right);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span><span class="comment">//没有合法解，三分</span></span><br><span class="line">  &#123;</span><br><span class="line">    find(r + <span class="number">1</span>, l - <span class="number">1</span>);</span><br><span class="line">    find(left, r);</span><br><span class="line">    find(l, right);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>枚举右端点得到解</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">rmq</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100005</span>] = &#123;&#125;;</span><br><span class="line"><span class="type">int</span> min[<span class="number">100005</span>][<span class="number">20</span>] = &#123;&#125;; <span class="comment">//min 里面存放最值的位置</span></span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">themin</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (a[x] &lt; a[y])</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">minpos</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> k = <span class="built_in">log</span>(right - left + <span class="number">1</span>) / <span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">return</span> themin(min[left][k], min[right + <span class="number">1</span> - (<span class="number">1</span> &lt;&lt; k)][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    min[i][<span class="number">0</span>] = i;</span><br><span class="line">  &#125;</span><br><span class="line">  rmq(n);</span><br><span class="line">  find(n);</span><br><span class="line">  <span class="keyword">if</span> (ans == <span class="number">1</span>)</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">rmq</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line"><span class="comment">//存入区间最小值的位置</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i, j;</span><br><span class="line">  <span class="keyword">for</span> (j = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; j) &lt;= n; j++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      min[i][j] = themin(min[i][j - <span class="number">1</span>], min[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line"><span class="comment">//枚举最右端点B，找到左边比它大或者等于的点C，最小值点A一定在C右边,找到区间最小值点是最优解</span></span><br><span class="line"><span class="comment">//然后这时找到的AB区间内不会再有下一个区间比当前区间更优的点B存在</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">int</span> maxposs = i, minposs;</span><br><span class="line">    <span class="type">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (a[maxposs] &gt; a[j] &amp;&amp; j &gt;= <span class="number">0</span>)</span><br><span class="line">      j--;</span><br><span class="line">    <span class="keyword">if</span> (j &gt;= <span class="number">0</span>)</span><br><span class="line">      minposs = minpos(j + <span class="number">1</span>, maxposs);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      minposs = minpos(<span class="number">0</span>, maxposs);</span><br><span class="line">    ans = ans &gt; (maxposs - minposs + <span class="number">1</span>) ? ans : maxposs - minposs + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//printf(&quot; %d %d %d\n&quot;, minposs, maxposs, ans);</span></span><br><span class="line">    i = minposs;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>C,C++</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title>P2392</title>
    <url>//446d8f0f.html</url>
    <content><![CDATA[<p>P2392 kkksc03考前临时抱佛脚—01背包<span id="more"></span></p>
<h1 id="P2392-kkksc03考前临时抱佛脚—01背包"><a href="#P2392-kkksc03考前临时抱佛脚—01背包" class="headerlink" title="P2392 kkksc03考前临时抱佛脚—01背包"></a>P2392 kkksc03考前临时抱佛脚—01背包</h1><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>kkksc03 的大学生活非常的颓废，平时根本不学习。但是，临近期末考试，他必须要开始抱佛脚，以求不挂科。</p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>这次期末考试，kkksc03 需要考 44 科。因此要开始刷习题集，每科都有一个习题集，分别有s1,<em>s</em>2,<em>s</em>3,<em>s</em>4 道题目，完成每道题目需要一些时间，可能不等<em>A</em>1,<em>A</em>2,…,<em>A</em>s<em>1，B</em>1,<em>B</em>2,…,<em>B</em>s2，<em>C</em>1,<em>C</em>2,…,<em>C</em>s<em>3，</em>D<em>1,<em>D</em>2,…,<em>D</em>s</em>4。</p>
<p>kkksc03 有一个能力，他的左右两个大脑可以同时计算 2 道不同的题目，但是仅限于同一科。因此，kkksc03 必须一科一科的复习。</p>
<p>由于 kkksc03 还急着去处理洛谷的 bug，因此他希望尽快把事情做完，所以他希望知道能够完成复习的最短时间。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>本题包含 55 行数据：第 11 行，为四个正整数 s*1,<em>s</em>2,<em>s</em>3,<em>s</em>4。</p>
<p>第 22 行，为<em>A</em>1,<em>A</em>2,…,<em>A</em>s1 共 s1 个数，表示第一科习题集每道题目所消耗的时间。</p>
<p>第 33 行，为 B<em>1,<em>B</em>2,…,<em>B</em>s</em>2 共 s2 个数。</p>
<p>第 44 行，为C<em>1,<em>C</em>2,…,<em>C</em>s</em>3 共 s3 个数。</p>
<p>第 55 行，为 <em>D</em>1,<em>D</em>2,…,<em>D</em>s4 共 s4 个数，意思均同上。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行,为复习完毕最短时间。</p>
<h3 id="1-递归搜索"><a href="#1-递归搜索" class="headerlink" title="1.递归搜索"></a><em><strong>1.递归搜索</strong></em></h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> a[<span class="number">21</span>] = &#123;&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">&#125;<span class="comment">//返回较大值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">lesstime</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> m)</span><span class="comment">//i代表第i个习题，m代表剩下的时间</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> s;<span class="comment">//已安排的时间</span></span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(m &gt;= a[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = lesstime(i - <span class="number">1</span>, m - a[i]) + a[i]; <span class="comment">//放入第i个习题</span></span><br><span class="line">        <span class="type">int</span> y = lesstime(i - <span class="number">1</span>, m);<span class="comment">//不放入第i个习题</span></span><br><span class="line">        s = max(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        s = lesstime(i - <span class="number">1</span>, m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;<span class="comment">//递归搜索求最优解，得到小于时间总数1/2的最大时间</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> s[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;s[<span class="number">0</span>], &amp;s[<span class="number">1</span>], &amp;s[<span class="number">2</span>], &amp;s[<span class="number">3</span>]);</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">int</span> sums = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= s[i]; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[j]);</span><br><span class="line">            sum += a[j];</span><br><span class="line">        &#125;</span><br><span class="line">        sums += sum - lesstime(s[i], sum / <span class="number">2</span>); <span class="comment">//求得最靠近sum/2的时间，是最优解</span></span><br><span class="line">        sum = <span class="number">0</span>;<span class="comment">//重新计数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sums);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>递归在多个情况下剩余时间相同时，会反复查找多次，重复计算节点。</p>
<h3 id="2-动态规划"><a href="#2-动态规划" class="headerlink" title="2.动态规划"></a><em><strong>2.动态规划</strong></em></h3><hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">推导公式f[i][j]=max(f[i<span class="number">-1</span>][j],f[i<span class="number">-1</span>][j-a[i]]+a[i])</span><br><span class="line">f[i][j],i代表一共有i个习题,j代表最大时间</span><br><span class="line">从i<span class="number">-1</span>个习题到i个习题,可以装也可以不装,按照价值最大的方案装。</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> a[<span class="number">21</span>] = &#123;&#125;;</span><br><span class="line"><span class="type">int</span> f[<span class="number">21</span>][<span class="number">10000</span>] = &#123;&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">&#125;<span class="comment">//返回较大值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">lesstime</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> m)</span><span class="comment">//i代表i个习题，m代表最大时间</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> p, q;</span><br><span class="line">    <span class="keyword">for</span> (q = <span class="number">1</span>; q &lt;= i; q++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (p = <span class="number">1</span>; p &lt;= m; p++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[q]&lt;=p)<span class="comment">//可以放下</span></span><br><span class="line">            &#123;</span><br><span class="line">                f[q][p] = max(f[q - <span class="number">1</span>][p], f[q - <span class="number">1</span>][p - a[q]] + a[q]);<span class="comment">//求得最优解</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span><span class="comment">//放不下</span></span><br><span class="line">                f[q][p] = f[q - <span class="number">1</span>][p];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[i][m];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> s[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;s[<span class="number">0</span>], &amp;s[<span class="number">1</span>], &amp;s[<span class="number">2</span>], &amp;s[<span class="number">3</span>]);</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">int</span> sums = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= s[i]; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[j]);</span><br><span class="line">            sum += a[j];</span><br><span class="line">        &#125;</span><br><span class="line">        sums += sum - lesstime(s[i],sum/<span class="number">2</span>); <span class="comment">//求得最靠近sum/2的时间，是最优解</span></span><br><span class="line">        <span class="comment">//重新计数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;f[%d][%d]=%d\n&quot;</span>,s[i],sum/<span class="number">2</span>,lesstime(s[i],sum/<span class="number">2</span>));</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sums);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em><strong>动态规划在数据较多的情况下运行效率一般比递归搜索高，动态规划可重新递推求得最优解的组成</strong></em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">如果f[i][m] = f[i<span class="number">-1</span>][m],则第i个物品未被装入，否则被装入。</span><br></pre></td></tr></table></figure>

<h3 id="动态规划空间优化"><a href="#动态规划空间优化" class="headerlink" title="动态规划空间优化"></a><em><strong>动态规划空间优化</strong></em></h3><p>优化后前一次数据被覆盖导致无法求得最优解组成。</p>
<p>每次推导下一轮数据时需要上一轮循坏数据，所以必须倒序推，否则会修改前面的数据，导致这次循环数据使用的本轮循坏数据，即</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f[i][j]=max(f[i-1][j],f[i][j-a[i]]+a[i]);(wrong)</span><br><span class="line">f[i][j]=max(f[i-1][j],f[i-1][j-a[i]]+a[i])(right)</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> a[<span class="number">21</span>] = &#123;&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">&#125;<span class="comment">//返回较大值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">lesstime</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> m)</span><span class="comment">//i代表i个习题，m代表剩下的时间</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> f[<span class="number">10000</span>] = &#123;&#125;;</span><br><span class="line">    <span class="type">int</span> p, q;</span><br><span class="line">    <span class="keyword">for</span> (q = <span class="number">1</span>; q &lt;= i; q++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (p = m; p &gt;= <span class="number">0</span>; p--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[q]&lt;=p)<span class="comment">//可以放下</span></span><br><span class="line">            &#123;</span><br><span class="line">                f[p] = max(f[p], f[p - a[q]] + a[q]); <span class="comment">//求得最优解</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span><span class="comment">//放不下</span></span><br><span class="line">                f[p] = f[p];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[m];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> s[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;s[<span class="number">0</span>], &amp;s[<span class="number">1</span>], &amp;s[<span class="number">2</span>], &amp;s[<span class="number">3</span>]);</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">int</span> sums = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= s[i]; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[j]);</span><br><span class="line">            sum += a[j];</span><br><span class="line">        &#125;</span><br><span class="line">        sums += sum - lesstime(s[i],sum/<span class="number">2</span>); <span class="comment">//求得最靠近sum/2的时间，是最优解</span></span><br><span class="line">        <span class="comment">//重新计数</span></span><br><span class="line">        <span class="comment">//printf(&quot;f[%d]=%d\n&quot;,sum/2,lesstime(s[i],sum/2));</span></span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sums);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C,C++</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title>unity 协程</title>
    <url>//335d71e2.html</url>
    <content><![CDATA[<p>Unity 协程原理<span id="more"></span></p>
<h1 id="unity-协程"><a href="#unity-协程" class="headerlink" title="unity 协程"></a>unity 协程</h1><p>Unity 开发常用到协程Coroutine，但是unity的协程和monobehaviour绑定，有时候并不想继承mono，但是又想使用协程，这时候就有点麻烦，<del>不如来学习协程原理来自己写一个吧（</del></p>
<h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>下面是一个简单的协程，我们可以看到下面除了常用语法，还有两个相对比较陌生的东西<strong>IEnumerator和yield</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UnityCoroutineTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerator <span class="title">UnityCoroutineTestFunction</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> UnityCoroutineTest_i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (UnityCoroutineTest_i &lt; <span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            UnityCoroutineTest_i++;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="IEnumerator-迭代器"><a href="#IEnumerator-迭代器" class="headerlink" title="IEnumerator 迭代器"></a>IEnumerator 迭代器</h3><p>IEnumerator定义，一个接口，实现了下面的函数</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">System.Collections</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IEnumerator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//指向当前物体</span></span><br><span class="line">        <span class="built_in">object</span> Current &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">		<span class="comment">//移向下一个</span></span><br><span class="line">        <span class="function"><span class="built_in">bool</span> <span class="title">MoveNext</span>()</span>;</span><br><span class="line">        <span class="comment">//重置</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Reset</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>谈到了IEnumerator，顺便谈谈IEnumerable，可能看上去比较陌生，但其实我们常用的foreach遍历集合数组，背后就是IEnumerable在帮助我们，GetEnumerator获得迭代器，然后用迭代器进行遍历</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">System.Collections</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IEnumerable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">IEnumerator <span class="title">GetEnumerator</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接看官方文档使用案例，官方文档<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.collections.ienumerator?view=netframework-4.7.1">IEnumerator 接口 (System.Collections) | Microsoft Learn</a></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    coroutineTest = <span class="keyword">new</span> UnityCoroutineTest();</span><br><span class="line">    IEnumerator enumerator = coroutineTest.UnityCoroutineTestFunction();</span><br><span class="line">    <span class="keyword">while</span> (enumerator != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(enumerator.MoveNext())</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(enumerator.Current);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/forestlyn/Drawing-bed/blog/image-20231208104425008.png" alt="image-20231208104425008"></p>
<h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><p>根据官方文档来看，实现IEnemerator&#x2F;IEnumerable非常麻烦，需要实现接口类</p>
<p>但是我们的协程函数，并没有继承IEnumerator，但为什么还是可以使用对应的方法？</p>
<p>关键就是yield，直接看官方文档解释</p>
<p><a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/statements/yield">yield 语句 - 在迭代器中提供下一个元素 - C# | Microsoft Learn</a></p>
<p>总结就是yield是C#的关键字，其实就是快速定义迭代器的语法糖。</p>
<h3 id="协程原理"><a href="#协程原理" class="headerlink" title="协程原理"></a>协程原理</h3><p>上面我们知道了yield IEnumerator</p>
<p>其实我们的协程函数就是一个迭代器函数，那我们为什么可以使用yield return null停住函数到下一帧执行，或者使用yield return new WaitForSeconds等待几秒继续执行呢</p>
<p>利用Unity的IL2CPP，将c#编译为c++ 截取部分</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UnityCoroutineTest</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">UnityCoroutineTest_t1C000B5AF0E49BD3FF9C3A33861B2E804321D562</span>;</span><br><span class="line"><span class="comment">// UnityCoroutineTest/&lt;UnityCoroutineTestFunction&gt;d__0</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">U3CUnityCoroutineTestFunctionU3Ed__0_t9745C4E179E3DDFF3C5734D8AC75AF3E86F14ABA</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UnityCoroutineTest/&lt;UnityCoroutineTestFunction&gt;d__0</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">U3CUnityCoroutineTestFunctionU3Ed__0_t9745C4E179E3DDFF3C5734D8AC75AF3E86F14ABA</span>  : <span class="keyword">public</span> RuntimeObject</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// System.Int32 UnityCoroutineTest/&lt;UnityCoroutineTestFunction&gt;d__0::&lt;&gt;1__state</span></span><br><span class="line">	<span class="type">int32_t</span> ___U3CU3E1__state_0;</span><br><span class="line">	<span class="comment">// System.Object UnityCoroutineTest/&lt;UnityCoroutineTestFunction&gt;d__0::&lt;&gt;2__current</span></span><br><span class="line">	RuntimeObject* ___U3CU3E2__current_1;</span><br><span class="line">	<span class="comment">// System.Int32 UnityCoroutineTest/&lt;UnityCoroutineTestFunction&gt;d__0::&lt;UnityCoroutineTest_i&gt;5__2</span></span><br><span class="line">	<span class="type">int32_t</span> ___U3CUnityCoroutineTest_iU3E5__2_2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// System.Void UnityCoroutineTest/&lt;UnityCoroutineTestFunction&gt;d__0::.ctor(System.Int32)</span></span><br><span class="line"><span class="function">IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR <span class="type">void</span> <span class="title">U3CUnityCoroutineTestFunctionU3Ed__0__ctor_m4DEDAEE22CC7C85C7E65D5C00DFE19D3FE923F09</span> <span class="params">(U3CUnityCoroutineTestFunctionU3Ed__0_t9745C4E179E3DDFF3C5734D8AC75AF3E86F14ABA* __this, <span class="type">int32_t</span> ___0_U3CU3E1__state, <span class="type">const</span> RuntimeMethod* method)</span> </span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// System.Collections.IEnumerator UnityCoroutineTest::UnityCoroutineTestFunction()</span></span><br><span class="line"><span class="function">IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject* <span class="title">UnityCoroutineTest_UnityCoroutineTestFunction_m5CE5BCA8CD865CB46FB4694BF146B222BBD4CC30</span> <span class="params">(UnityCoroutineTest_t1C000B5AF0E49BD3FF9C3A33861B2E804321D562* __this, <span class="type">const</span> RuntimeMethod* method)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">bool</span> s_Il2CppMethodInitialized;</span><br><span class="line">	<span class="keyword">if</span> (!s_Il2CppMethodInitialized)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">il2cpp_codegen_initialize_runtime_metadata</span>((<span class="type">uintptr_t</span>*)&amp;U3CUnityCoroutineTestFunctionU3Ed__0_t9745C4E179E3DDFF3C5734D8AC75AF3E86F14ABA_il2cpp_TypeInfo_var);</span><br><span class="line">		s_Il2CppMethodInitialized = <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		U3CUnityCoroutineTestFunctionU3Ed__0_t9745C4E179E3DDFF3C5734D8AC75AF3E86F14ABA* L_0 = (U3CUnityCoroutineTestFunctionU3Ed__0_t9745C4E179E3DDFF3C5734D8AC75AF3E86F14ABA*)<span class="built_in">il2cpp_codegen_object_new</span>(U3CUnityCoroutineTestFunctionU3Ed__0_t9745C4E179E3DDFF3C5734D8AC75AF3E86F14ABA_il2cpp_TypeInfo_var);</span><br><span class="line">		<span class="built_in">NullCheck</span>(L_0);</span><br><span class="line">		<span class="built_in">U3CUnityCoroutineTestFunctionU3Ed__0__ctor_m4DEDAEE22CC7C85C7E65D5C00DFE19D3FE923F09</span>(L_0, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">		<span class="keyword">return</span> L_0;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// System.Void UnityCoroutineTest/&lt;UnityCoroutineTestFunction&gt;d__0::.ctor(System.Int32)</span></span><br><span class="line"><span class="function">IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR <span class="type">void</span> <span class="title">U3CUnityCoroutineTestFunctionU3Ed__0__ctor_m4DEDAEE22CC7C85C7E65D5C00DFE19D3FE923F09</span> <span class="params">(U3CUnityCoroutineTestFunctionU3Ed__0_t9745C4E179E3DDFF3C5734D8AC75AF3E86F14ABA* __this, <span class="type">int32_t</span> ___0_U3CU3E1__state, <span class="type">const</span> RuntimeMethod* method)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">Object__ctor_mE837C6B9FA8C6D5D109F4B2EC885D79919AC0EA2</span>(__this, <span class="literal">NULL</span>);</span><br><span class="line">		<span class="type">int32_t</span> L_0 = ___0_U3CU3E1__state;</span><br><span class="line">		__this-&gt;___U3CU3E1__state_0 = L_0;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// System.Void UnityCoroutineTest/&lt;UnityCoroutineTestFunction&gt;d__0::System.IDisposable.Dispose()</span></span><br><span class="line"><span class="function">IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR <span class="type">void</span> <span class="title">U3CUnityCoroutineTestFunctionU3Ed__0_System_IDisposable_Dispose_m8FD2D852D14451272231DB230B32DBA6359386AA</span> <span class="params">(U3CUnityCoroutineTestFunctionU3Ed__0_t9745C4E179E3DDFF3C5734D8AC75AF3E86F14ABA* __this, <span class="type">const</span> RuntimeMethod* method)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// System.Boolean UnityCoroutineTest/&lt;UnityCoroutineTestFunction&gt;d__0::MoveNext()</span></span><br><span class="line"><span class="function">IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR <span class="type">bool</span> <span class="title">U3CUnityCoroutineTestFunctionU3Ed__0_MoveNext_m3A155395AC6F342CA8666F1337118795E87D2F00</span> <span class="params">(U3CUnityCoroutineTestFunctionU3Ed__0_t9745C4E179E3DDFF3C5734D8AC75AF3E86F14ABA* __this, <span class="type">const</span> RuntimeMethod* method)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int32_t</span> V_0 = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int32_t</span> V_1 = <span class="number">0</span>;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int32_t</span> L_0 = __this-&gt;___U3CU3E1__state_0;</span><br><span class="line">		V_0 = L_0;</span><br><span class="line">		<span class="type">int32_t</span> L_1 = V_0;</span><br><span class="line">		<span class="keyword">if</span> (!L_1)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">goto</span> IL_0010;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int32_t</span> L_2 = V_0;</span><br><span class="line">		<span class="keyword">if</span> ((((<span class="type">int32_t</span>)L_2) == ((<span class="type">int32_t</span>)<span class="number">1</span>)))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">goto</span> IL_0040;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="type">bool</span>)<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">IL_0010:</span><br><span class="line">	&#123;</span><br><span class="line">		__this-&gt;___U3CU3E1__state_0 = (<span class="number">-1</span>);</span><br><span class="line">		<span class="comment">// int UnityCoroutineTest_i = 0;</span></span><br><span class="line">		__this-&gt;___U3CUnityCoroutineTest_iU3E5__2_2 = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">goto</span> IL_0047;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">IL_0020:</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// UnityCoroutineTest_i++;</span></span><br><span class="line">		<span class="type">int32_t</span> L_3 = __this-&gt;___U3CUnityCoroutineTest_iU3E5__2_2;</span><br><span class="line">		V_1 = L_3;</span><br><span class="line">		<span class="type">int32_t</span> L_4 = V_1;</span><br><span class="line">		__this-&gt;___U3CUnityCoroutineTest_iU3E5__2_2 = ((<span class="type">int32_t</span>)<span class="built_in">il2cpp_codegen_add</span>(L_4, <span class="number">1</span>));</span><br><span class="line">		<span class="comment">// yield return null;</span></span><br><span class="line">		__this-&gt;___U3CU3E2__current_1 = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="built_in">Il2CppCodeGenWriteBarrier</span>((<span class="type">void</span>**)(&amp;__this-&gt;___U3CU3E2__current_1), (<span class="type">void</span>*)<span class="literal">NULL</span>);</span><br><span class="line">		__this-&gt;___U3CU3E1__state_0 = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> (<span class="type">bool</span>)<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">IL_0040:</span><br><span class="line">	&#123;</span><br><span class="line">		__this-&gt;___U3CU3E1__state_0 = (<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">IL_0047:</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// while (UnityCoroutineTest_i &lt; 10)</span></span><br><span class="line">		<span class="type">int32_t</span> L_5 = __this-&gt;___U3CUnityCoroutineTest_iU3E5__2_2;</span><br><span class="line">		<span class="keyword">if</span> ((((<span class="type">int32_t</span>)L_5) &lt; ((<span class="type">int32_t</span>)((<span class="type">int32_t</span>)<span class="number">10</span>))))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">goto</span> IL_0020;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// &#125;</span></span><br><span class="line">		<span class="keyword">return</span> (<span class="type">bool</span>)<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// System.Object UnityCoroutineTest/&lt;UnityCoroutineTestFunction&gt;d__0::System.Collections.Generic.IEnumerator&lt;System.Object&gt;.get_Current()</span></span><br><span class="line"><span class="function">IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject* <span class="title">U3CUnityCoroutineTestFunctionU3Ed__0_System_Collections_Generic_IEnumeratorU3CSystem_ObjectU3E_get_Current_m9ED6C30EC34DBF0ECACE9A93DE5FCDBAFF10D0C9</span> <span class="params">(U3CUnityCoroutineTestFunctionU3Ed__0_t9745C4E179E3DDFF3C5734D8AC75AF3E86F14ABA* __this, <span class="type">const</span> RuntimeMethod* method)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	&#123;</span><br><span class="line">		RuntimeObject* L_0 = __this-&gt;___U3CU3E2__current_1;</span><br><span class="line">		<span class="keyword">return</span> L_0;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// System.Void UnityCoroutineTest/&lt;UnityCoroutineTestFunction&gt;d__0::System.Collections.IEnumerator.Reset()</span></span><br><span class="line"><span class="function">IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR <span class="type">void</span> <span class="title">U3CUnityCoroutineTestFunctionU3Ed__0_System_Collections_IEnumerator_Reset_mC0DAB409F8D496258495CE3857425D58F9848D4A</span> <span class="params">(U3CUnityCoroutineTestFunctionU3Ed__0_t9745C4E179E3DDFF3C5734D8AC75AF3E86F14ABA* __this, <span class="type">const</span> RuntimeMethod* method)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	&#123;</span><br><span class="line">		NotSupportedException_t1429765983D409BD2986508963C98D214E4EBF4A* L_0 = (NotSupportedException_t1429765983D409BD2986508963C98D214E4EBF4A*)<span class="built_in">il2cpp_codegen_object_new</span>(((RuntimeClass*)<span class="built_in">il2cpp_codegen_initialize_runtime_metadata_inline</span>((<span class="type">uintptr_t</span>*)&amp;NotSupportedException_t1429765983D409BD2986508963C98D214E4EBF4A_il2cpp_TypeInfo_var)));</span><br><span class="line">		<span class="built_in">NullCheck</span>(L_0);</span><br><span class="line">		<span class="built_in">NotSupportedException__ctor_m1398D0CDE19B36AA3DE9392879738C1EA2439CDF</span>(L_0, <span class="literal">NULL</span>);</span><br><span class="line">		<span class="built_in">IL2CPP_RAISE_MANAGED_EXCEPTION</span>(L_0, ((RuntimeMethod*)<span class="built_in">il2cpp_codegen_initialize_runtime_metadata_inline</span>((<span class="type">uintptr_t</span>*)&amp;U3CUnityCoroutineTestFunctionU3Ed__0_System_Collections_IEnumerator_Reset_mC0DAB409F8D496258495CE3857425D58F9848D4A_RuntimeMethod_var)));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// System.Object UnityCoroutineTest/&lt;UnityCoroutineTestFunction&gt;d__0::System.Collections.IEnumerator.get_Current()</span></span><br><span class="line"><span class="function">IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject* <span class="title">U3CUnityCoroutineTestFunctionU3Ed__0_System_Collections_IEnumerator_get_Current_m815A583450518900F6F1FC1AC48DB29369377C91</span> <span class="params">(U3CUnityCoroutineTestFunctionU3Ed__0_t9745C4E179E3DDFF3C5734D8AC75AF3E86F14ABA* __this, <span class="type">const</span> RuntimeMethod* method)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	&#123;</span><br><span class="line">		RuntimeObject* L_0 = __this-&gt;___U3CU3E2__current_1;</span><br><span class="line">		<span class="keyword">return</span> L_0;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __clang__</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> clang diagnostic pop</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>对于迭代器函数。将其编译成了类，并且实现了接口函数，那停等又是怎么实现的呢</p>
<p>查看movenext函数，可以发现其中通过不同的跳转实现了我们实现的逻辑，并对应返回true&#x2F;false</p>
<p>那协程的实现就可以大致的猜到了,流程如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/forestlyn/Drawing-bed/blog/image-20231208115153590.png" alt="image-20231208115153590"></p>
<h2 id="unity-startcoroutine-原理"><a href="#unity-startcoroutine-原理" class="headerlink" title="unity startcoroutine 原理"></a>unity startcoroutine 原理</h2><p>上面的仅为猜想，实际上是不是这样的呢，<del>看看源码就知道了）</del> 没有源码可看</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR <span class="type">void</span> <span class="title">CoroutineTest_Start_m7030C8C182CF1F69656573098D28E0DCEFBF1F79</span> <span class="params">(CoroutineTest_t7632EEB899E029CCDFF86C210611720ECAB096FA* __this, <span class="type">const</span> RuntimeMethod* method)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">bool</span> s_Il2CppMethodInitialized;</span><br><span class="line">	<span class="keyword">if</span> (!s_Il2CppMethodInitialized)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">il2cpp_codegen_initialize_runtime_metadata</span>((<span class="type">uintptr_t</span>*)&amp;UnityCoroutineTest_t1C000B5AF0E49BD3FF9C3A33861B2E804321D562_il2cpp_TypeInfo_var);</span><br><span class="line">		s_Il2CppMethodInitialized = <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// coroutineTest = new UnityCoroutineTest();</span></span><br><span class="line">		UnityCoroutineTest_t1C000B5AF0E49BD3FF9C3A33861B2E804321D562* L_0 = (UnityCoroutineTest_t1C000B5AF0E49BD3FF9C3A33861B2E804321D562*)<span class="built_in">il2cpp_codegen_object_new</span>(UnityCoroutineTest_t1C000B5AF0E49BD3FF9C3A33861B2E804321D562_il2cpp_TypeInfo_var);</span><br><span class="line">		<span class="built_in">NullCheck</span>(L_0);</span><br><span class="line">		<span class="built_in">UnityCoroutineTest__ctor_mAF28F94E6D560827424C4258926A686389211267</span>(L_0, <span class="literal">NULL</span>);</span><br><span class="line">		__this-&gt;___coroutineTest_4 = L_0;</span><br><span class="line">		<span class="built_in">Il2CppCodeGenWriteBarrier</span>((<span class="type">void</span>**)(&amp;__this-&gt;___coroutineTest_4), (<span class="type">void</span>*)L_0);</span><br><span class="line">		<span class="comment">// StartCoroutine(coroutineTest.UnityCoroutineTestFunction());</span></span><br><span class="line">		UnityCoroutineTest_t1C000B5AF0E49BD3FF9C3A33861B2E804321D562* L_1 = __this-&gt;___coroutineTest_4;</span><br><span class="line">		<span class="built_in">NullCheck</span>(L_1);</span><br><span class="line">		RuntimeObject* L_2;</span><br><span class="line">		L_2 = <span class="built_in">UnityCoroutineTest_UnityCoroutineTestFunction_m5CE5BCA8CD865CB46FB4694BF146B222BBD4CC30</span>(L_1, <span class="literal">NULL</span>);</span><br><span class="line">		Coroutine_t85EA685566A254C23F3FD77AB5BDFFFF8799596B* L_3;</span><br><span class="line">		L_3 = <span class="built_in">MonoBehaviour_StartCoroutine_m4CAFF732AA28CD3BDC5363B44A863575530EC812</span>(__this, L_2, <span class="literal">NULL</span>);</span><br><span class="line">		<span class="comment">// &#125;</span></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UnityEngine.Coroutine UnityEngine.MonoBehaviour::StartCoroutine(System.Collections.IEnumerator)</span></span><br><span class="line"><span class="function">IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Coroutine_t85EA685566A254C23F3FD77AB5BDFFFF8799596B* <span class="title">MonoBehaviour_StartCoroutine_m4CAFF732AA28CD3BDC5363B44A863575530EC812</span> <span class="params">(MonoBehaviour_t532A11E69716D348D8AA7F854AFCBFCB8AD17F71* __this, RuntimeObject* ___0_routine, <span class="type">const</span> RuntimeMethod* method)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">bool</span> V_0 = <span class="literal">false</span>;</span><br><span class="line">	<span class="type">bool</span> V_1 = <span class="literal">false</span>;</span><br><span class="line">	Coroutine_t85EA685566A254C23F3FD77AB5BDFFFF8799596B* V_2 = <span class="literal">NULL</span>;</span><br><span class="line">	&#123;</span><br><span class="line">		RuntimeObject* L_0 = ___0_routine;</span><br><span class="line">		V_0 = (<span class="type">bool</span>)((((RuntimeObject*)(RuntimeObject*)L_0) == ((RuntimeObject*)(RuntimeObject*)<span class="literal">NULL</span>))? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">		<span class="type">bool</span> L_1 = V_0;</span><br><span class="line">		<span class="keyword">if</span> (!L_1)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">goto</span> IL_0014;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		NullReferenceException_tBDE63A6D24569B964908408389070C6A9F5005BB* L_2 = (NullReferenceException_tBDE63A6D24569B964908408389070C6A9F5005BB*)<span class="built_in">il2cpp_codegen_object_new</span>(((RuntimeClass*)<span class="built_in">il2cpp_codegen_initialize_runtime_metadata_inline</span>((<span class="type">uintptr_t</span>*)&amp;NullReferenceException_tBDE63A6D24569B964908408389070C6A9F5005BB_il2cpp_TypeInfo_var)));</span><br><span class="line">		<span class="built_in">NullCheck</span>(L_2);</span><br><span class="line">		<span class="built_in">NullReferenceException__ctor_mA41317A57F5C1C0E3F59C7EB25ABD484564B23D4</span>(L_2, ((String_t*)<span class="built_in">il2cpp_codegen_initialize_runtime_metadata_inline</span>((<span class="type">uintptr_t</span>*)&amp;_stringLiteral26A69F385CB916B500238120B972B54B804F7DDE)), <span class="literal">NULL</span>);</span><br><span class="line">		<span class="built_in">IL2CPP_RAISE_MANAGED_EXCEPTION</span>(L_2, ((RuntimeMethod*)<span class="built_in">il2cpp_codegen_initialize_runtime_metadata_inline</span>((<span class="type">uintptr_t</span>*)&amp;MonoBehaviour_StartCoroutine_m4CAFF732AA28CD3BDC5363B44A863575530EC812_RuntimeMethod_var)));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">IL_0014:</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">bool</span> L_3;</span><br><span class="line">        <span class="comment">//检查是否是monobehaviour</span></span><br><span class="line">		L_3 = <span class="built_in">MonoBehaviour_IsObjectMonoBehaviour_mC2F75720102B56F81F3D1329BE96C2C7B336B615</span>(__this, <span class="literal">NULL</span>);</span><br><span class="line">		V_1 = (<span class="type">bool</span>)((((<span class="type">int32_t</span>)L_3) == ((<span class="type">int32_t</span>)<span class="number">0</span>))? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">		<span class="type">bool</span> L_4 = V_1;</span><br><span class="line">		<span class="keyword">if</span> (!L_4)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">goto</span> IL_002c;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		ArgumentException_tAD90411542A20A9C72D5CDA3A84181D8B947A263* L_5 = (ArgumentException_tAD90411542A20A9C72D5CDA3A84181D8B947A263*)<span class="built_in">il2cpp_codegen_object_new</span>(((RuntimeClass*)<span class="built_in">il2cpp_codegen_initialize_runtime_metadata_inline</span>((<span class="type">uintptr_t</span>*)&amp;ArgumentException_tAD90411542A20A9C72D5CDA3A84181D8B947A263_il2cpp_TypeInfo_var)));</span><br><span class="line">		<span class="built_in">NullCheck</span>(L_5);</span><br><span class="line">		<span class="built_in">ArgumentException__ctor_m026938A67AF9D36BB7ED27F80425D7194B514465</span>(L_5, ((String_t*)<span class="built_in">il2cpp_codegen_initialize_runtime_metadata_inline</span>((<span class="type">uintptr_t</span>*)&amp;_stringLiteralB354FCF3A750169C4EEFC050334DD9F51BC10E0C)), <span class="literal">NULL</span>);</span><br><span class="line">		<span class="built_in">IL2CPP_RAISE_MANAGED_EXCEPTION</span>(L_5, ((RuntimeMethod*)<span class="built_in">il2cpp_codegen_initialize_runtime_metadata_inline</span>((<span class="type">uintptr_t</span>*)&amp;MonoBehaviour_StartCoroutine_m4CAFF732AA28CD3BDC5363B44A863575530EC812_RuntimeMethod_var)));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">IL_002c:</span><br><span class="line">	&#123;</span><br><span class="line">		RuntimeObject* L_6 = ___0_routine;</span><br><span class="line">		Coroutine_t85EA685566A254C23F3FD77AB5BDFFFF8799596B* L_7;</span><br><span class="line">		L_7 = <span class="built_in">MonoBehaviour_StartCoroutineManaged2_m55C19C5C5C65E9883E12101A46F37AB1172C73E8</span>(__this, L_6, <span class="literal">NULL</span>);</span><br><span class="line">		V_2 = L_7;</span><br><span class="line">		<span class="keyword">goto</span> IL_0036;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">IL_0036:</span><br><span class="line">	&#123;</span><br><span class="line">		Coroutine_t85EA685566A254C23F3FD77AB5BDFFFF8799596B* L_8 = V_2;</span><br><span class="line">		<span class="keyword">return</span> L_8;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UnityEngine.Coroutine UnityEngine.MonoBehaviour::StartCoroutineManaged2(System.Collections.IEnumerator)</span></span><br><span class="line"><span class="function">IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Coroutine_t85EA685566A254C23F3FD77AB5BDFFFF8799596B* <span class="title">MonoBehaviour_StartCoroutineManaged2_m55C19C5C5C65E9883E12101A46F37AB1172C73E8</span> <span class="params">(MonoBehaviour_t532A11E69716D348D8AA7F854AFCBFCB8AD17F71* __this, RuntimeObject* ___0_enumerator, <span class="type">const</span> RuntimeMethod* method)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">typedef</span> Coroutine_t85EA685566A254C23F3FD77AB5BDFFFF8799596B* (*MonoBehaviour_StartCoroutineManaged2_m55C19C5C5C65E9883E12101A46F37AB1172C73E8_ftn) (MonoBehaviour_t532A11E69716D348D8AA7F854AFCBFCB8AD17F71*, RuntimeObject*);</span><br><span class="line">	<span class="type">static</span> MonoBehaviour_StartCoroutineManaged2_m55C19C5C5C65E9883E12101A46F37AB1172C73E8_ftn _il2cpp_icall_func;</span><br><span class="line">	<span class="keyword">if</span> (!_il2cpp_icall_func)</span><br><span class="line">	_il2cpp_icall_func = (MonoBehaviour_StartCoroutineManaged2_m55C19C5C5C65E9883E12101A46F37AB1172C73E8_ftn)<span class="built_in">il2cpp_codegen_resolve_icall</span> (<span class="string">&quot;UnityEngine.MonoBehaviour::StartCoroutineManaged2(System.Collections.IEnumerator)&quot;</span>);</span><br><span class="line">	Coroutine_t85EA685566A254C23F3FD77AB5BDFFFF8799596B* icallRetVal = _il2cpp_icall_func(__this, ___0_enumerator);</span><br><span class="line">	<span class="keyword">return</span> icallRetVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>等价为以下部分</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Coroutine <span class="title">StartCoroutine</span>(<span class="params">IEnumerator routine</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (routine == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullReferenceException(<span class="string">&quot;routine is null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!IsObjectMonoBehaviour(<span class="keyword">this</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;Coroutines can only be stopped on a MonoBehaviour&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> StartCoroutineManaged2(routine);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">MethodImpl(MethodImplOptions.InternalCall)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">extern</span> Coroutine <span class="title">StartCoroutineManaged2</span>(<span class="params">IEnumerator enumerator</span>)</span>;</span><br></pre></td></tr></table></figure>

<h2 id="实现自己的协程"><a href="#实现自己的协程" class="headerlink" title="实现自己的协程"></a>实现自己的协程</h2><p>unity中常用的就是返回null 和 waitforseconds ,对于返回我们约定一个接口，返回的值都要实现这个接口，是否完成，对于null ，直接返回true,对于waitforseconds，需要运行一定时间后才会返回true</p>
<p>在这里我也只实现了这两个返回值，这个可以扩展</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICoroutineYield</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">isDone</span>(<span class="params"><span class="built_in">float</span> deltaTime</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">YieldReturnNULL</span> : <span class="title">ICoroutineYield</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">YieldReturnNULL</span>()</span> &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">isDone</span>(<span class="params"><span class="built_in">float</span> deltaTime</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">YieldWaitForSeconds</span> : <span class="title">ICoroutineYield</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> m_time;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">YieldWaitForSeconds</span>(<span class="params"><span class="built_in">float</span> delayTime</span>)</span> &#123; m_time = delayTime; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">isDone</span>(<span class="params"><span class="built_in">float</span> deltaTime</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_time -= deltaTime;</span><br><span class="line">        <span class="keyword">return</span> m_time &lt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>协程的更新</p>
<p>需要注意的点：不要在foreach循环中修改迭代器容器的值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="type">void</span> <span class="title">onUpdate</span><span class="params">(<span class="type">float</span> deltaTime)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(coroutineDict.Count==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    var keys = <span class="keyword">new</span> <span class="built_in">List</span>&lt;string&gt;(coroutineDict.Keys);</span><br><span class="line">    foreach(var key in keys)</span><br><span class="line">    &#123;</span><br><span class="line">        var list = coroutineDict[key];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; list.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            var coroutine = list[i];</span><br><span class="line">            <span class="keyword">if</span> (!coroutine.Current.<span class="built_in">isDone</span>(deltaTime))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!coroutine.<span class="built_in">MoveNext</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                list.<span class="built_in">RemoveAt</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (coroutineDict[key].Count == <span class="number">0</span>)</span><br><span class="line">            coroutineDict.<span class="built_in">Remove</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/forestlyn/Drawing-bed/blog/image-20231209185855922.png" alt="image-20231209185855922"></p>
<p>code:<a href="https://github.com/forestlyn/GameProject/tree/master/SomeTools/MyCoroutines">GameProject&#x2F;SomeTools&#x2F;MyCoroutines at master · forestlyn&#x2F;GameProject (github.com)</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/iwiniwin/p/14878498.html">聊一聊Unity协程背后的实现原理 - iwiniwin - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>协程</tag>
      </tags>
  </entry>
  <entry>
    <title>关于free的一点小困惑</title>
    <url>//3f4c64ba.html</url>
    <content><![CDATA[<p>C语言中free函数的一点测试<span id="more"></span></p>
<h1 id="free"><a href="#free" class="headerlink" title="free"></a>free</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line">  <span class="type">int</span> *q;</span><br><span class="line">  q = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">  *q = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d %d %p&quot;</span>, p, *q, q);</span><br><span class="line">  <span class="built_in">free</span>(q);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot; %d %d %p&quot;</span>, p, *q, q);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">devC++:</span><br><span class="line">输出结果<span class="number">1</span>：<span class="number">1</span> <span class="number">2</span> <span class="number">0000000000B</span>F13E0 <span class="number">1</span> <span class="number">12517712</span> <span class="number">0000000000B</span>F13E0</span><br><span class="line">输出结果<span class="number">2</span>：<span class="number">1</span> <span class="number">2</span> <span class="number">00000000001813E0</span> <span class="number">1</span> <span class="number">1573200</span> <span class="number">00000000001813E0</span></span><br><span class="line">输出结果<span class="number">2</span>：<span class="number">1</span> <span class="number">2</span> <span class="number">0000000000</span>AC13E0 <span class="number">1</span> <span class="number">11272528</span> <span class="number">0000000000</span>AC13E0</span><br><span class="line">vscode:</span><br><span class="line">输出结果<span class="number">1</span>：<span class="number">1</span> <span class="number">2</span> <span class="number">0000000000761</span>A50 <span class="number">1</span> <span class="number">2</span> <span class="number">0000000000761</span>A50</span><br><span class="line">输出结果<span class="number">2</span>：<span class="number">1</span> <span class="number">2</span> <span class="number">0000000000951</span>A50 <span class="number">1</span> <span class="number">2</span> <span class="number">0000000000951</span>A50</span><br><span class="line">输出结果<span class="number">2</span>：<span class="number">1</span> <span class="number">2</span> <span class="number">00000000001F</span>1A50 <span class="number">1</span> <span class="number">2</span> <span class="number">00000000001F</span>1A50</span><br></pre></td></tr></table></figure>

<p>指针pfree前后指向的地址一致，但是dev似乎把p指向的地址中的值也free了？而vscode中的值还是不变的。</p>
<p><strong>我的vscode上结果如上，但是老婆的电脑上vscode输出和devc++类似？？？（疑惑增加了）</strong></p>
<p>但如果对free后的指针进行赋值还是可以实现的，并且此时值为均为所赋值的值。<strong>但这是不正确的操作（赋值操作输出和老婆一样）。</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">devC++:<span class="number">1</span> <span class="number">2</span> <span class="number">00000000001B</span>13E0 <span class="number">1</span> <span class="number">3</span> <span class="number">00000000001B</span>13E0</span><br><span class="line">vscode:<span class="number">1</span> <span class="number">2</span> <span class="number">0000000000791</span>A50 <span class="number">1</span> <span class="number">3</span> <span class="number">0000000000791</span>A50</span><br></pre></td></tr></table></figure>

<p><strong>WARN：free只能释放堆空间。像代码区、全局变量与静态变量区、栈区上的变量，都不需要程序员显示释放，这些区域上的空间，不能通过free函数来释放，否则执行时，会出错。</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line">  <span class="type">int</span> *q;</span><br><span class="line">  q = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">  <span class="built_in">printf</span></span><br><span class="line">  <span class="comment">//有无均不影响，即使分配了空间，在下一个操作中，q指向了p所在空间，而p不是用malloc分配的空间，依旧错误</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%p %p&quot;</span>, &amp;p, q);</span><br><span class="line">  q = &amp;p;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d %d %p&quot;</span>, p, *q, q);</span><br><span class="line">  <span class="built_in">free</span>(q);</span><br><span class="line">  *q = <span class="number">3</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot; %d %d %p&quot;</span>, p, *q, q);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">vscode执行结果：<span class="number">000000000061F</span>E1C <span class="number">00000000009E1</span>A50 <span class="number">1</span> <span class="number">1</span> <span class="number">000000000061F</span>E1C <span class="number">3</span> <span class="number">3</span> <span class="number">000000000061F</span>E1C</span><br><span class="line">devc++执行结果：<span class="number">000000000062F</span>E14 <span class="number">00000000007</span>A19D0 <span class="number">1</span> <span class="number">1</span> <span class="number">000000000062F</span>E14 <span class="number">3</span> <span class="number">3</span> <span class="number">000000000062F</span>E14</span><br></pre></td></tr></table></figure>

<p>错误，虽然vscode可以执行但是会报错 warning: attempt to free a non-heap object ‘p’ 即释放一个非堆上的空间</p>
<p>devc++执行不报错但是是错误危险的操作。</p>
<p>参考资料：<a href="https://blog.csdn.net/weixin_30267691/article/details/98983733">C语言动态内存的申请和释放_weixin_30267691的博客-CSDN博客</a></p>
]]></content>
      <categories>
        <category>C,C++</category>
      </categories>
      <tags>
        <tag>free函数</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式：单例模式（Singleton）</title>
    <url>//b6e70bfe.html</url>
    <content><![CDATA[<p>单例模式（Singleton）<span id="more"></span></p>
<h1 id="单例模式（Singleton）"><a href="#单例模式（Singleton）" class="headerlink" title="单例模式（Singleton）"></a>单例模式（Singleton）</h1><p>只有一个实例时使用，方便获取唯一对象。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Single</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">static</span> Singleton _instance;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">static</span> Singleton Instance</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">get</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (_instance == <span class="literal">null</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					Console.WriteLine(<span class="string">&quot;创建&quot;</span>);</span><br><span class="line">					_instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> _instance;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span> &#123; &#125;</span><br><span class="line">        <span class="comment">//保证不会通过new singleton()创建</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>命令模式在游戏中的应用</title>
    <url>//78134e07.html</url>
    <content><![CDATA[<p>设计模式：命令模式（Command) <span id="more"></span></p>
<h1 id="命令模式在游戏中的应用"><a href="#命令模式在游戏中的应用" class="headerlink" title="命令模式在游戏中的应用"></a>命令模式在游戏中的应用</h1><p>最近在做的一个游戏需要撤销重做功能，而这正是命令模式使用的场合，于是尝试使用命令模式实现这个功能</p>
<p>并且该游戏的操作可能会引发一系列结果，到时候撤销需要将一系列结果撤销&#x3D;。&#x3D;</p>
<p>这里就不讲命令模式是什么了直接上链接<a href="https://gpp.tkchu.me/command.html">命令模式 · Design Patterns Revisited · 游戏设计模式 (tkchu.me)</a></p>
<h2 id="之前的实现"><a href="#之前的实现" class="headerlink" title="之前的实现"></a>之前的实现</h2><p>之前忘记了命令模式这个设计模式，实现了一个丑陋的东西</p>
<p>之前对于对应的操作，调用操作并记录该操作，在操作前后记录该物体的状态，然后撤销时调用该操作对应的撤销操作，十分不方便且会记录一些不需要的状态，并且每个操作都需对应的撤销操作写在case中</p>
<p>并且一个操作导致一系列的后续结果时，此时撤销将十分麻烦</p>
<h2 id="命令模式实现"><a href="#命令模式实现" class="headerlink" title="命令模式实现"></a>命令模式实现</h2><p>对于操作，实现一个抽象Command类，里面有执行撤销两个方法，还有两个命令类的字段，记录前后指令，last指令指向什么指令导致该指令执行，next用于记录该一个命令引发了什么指令发生，可能某个指令会导致一系列指令发生，于是使用List记录</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Command</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Execute</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Undo</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Command last;</span><br><span class="line">    <span class="keyword">protected</span> List&lt;Command&gt; next;</span><br><span class="line">    <span class="keyword">public</span> Command Last &#123; <span class="keyword">get</span> =&gt; last; &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Command&gt; Next</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            next = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (next == <span class="literal">null</span>)</span><br><span class="line">                next = <span class="keyword">new</span> List&lt;Command&gt;();</span><br><span class="line">            <span class="keyword">return</span> next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于具体的command，继承该类并实现执行、撤销方法</p>
<p>现在的结构是：</p>
<p>PlayerCommand实现了player的command父类，其下一堆子类实现具体command</p>
<p>以玩家移动为例子</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">PlayerCommand</span> : <span class="title">Command</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> Player player;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PlayerCommand</span>(<span class="params">Player player</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.player = player;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerMove</span> : <span class="title">PlayerCommand</span></span><br><span class="line">&#123;</span><br><span class="line">    Vector2 dir;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PlayerMove</span>(<span class="params">Player player,Vector2 dir</span>):<span class="title">base</span>(<span class="params">player</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.dir = dir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Execute</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        player.Move(dir);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Undo</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        player.Move(-dir);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于指令的执行实际调用对应的操作，并将其添加到RedoManager已执行操作中，对指令的撤销重做执行交给redomanager管理执行，到此重做撤销就方便的实现啦</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Move</span>(<span class="params">Vector2 dir</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Command cmd = <span class="keyword">new</span> PlayerMove(player, dir);</span><br><span class="line">    cmd.Execute();</span><br><span class="line">    RedoManager.Instance.AddCommand(cmd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RedoManager</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> RedoCommandList redo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RedoManager instance;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RedoManager Instance &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> instance; &#125; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        instance = <span class="keyword">this</span>;</span><br><span class="line">        redo = <span class="keyword">new</span> RedoCommandList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddCommand</span>(<span class="params">Command command</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        redo.AppendRedoCommand(command, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 重做</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Redo</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Command command = redo.GetUndoCommand(<span class="keyword">out</span> <span class="built_in">bool</span> flag);</span><br><span class="line">        <span class="keyword">if</span> (!flag) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        command.Execute();</span><br><span class="line"></span><br><span class="line">        redo.RedoHelp(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 撤销</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Undo</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Command command = redo.GetRedoCommand(<span class="keyword">out</span> <span class="built_in">bool</span> flag);</span><br><span class="line">        <span class="keyword">if</span> (!flag) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        undo(command);</span><br><span class="line"></span><br><span class="line">        redo.UndoHelp(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">undo</span>(<span class="params">Command cmd</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (Command command <span class="keyword">in</span> cmd.Next)</span><br><span class="line">        &#123;</span><br><span class="line">            undo(command);</span><br><span class="line">        &#125;</span><br><span class="line">        cmd.Undo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> MyInputSystem;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RedoCommandList</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 可重做队列，即撤销后放入其中</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Command&gt; undoList;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 可撤销队列，即已经做了的放入其中</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Command&gt; redoList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedoCommandList</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        undoList = <span class="keyword">new</span> List&lt;Command&gt;();</span><br><span class="line">        redoList = <span class="keyword">new</span> List&lt;Command&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 已经执行事件放入其中</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;command&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;flag&quot;&gt;</span>true 新执行事件，而非重做事件<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">AppendRedoCommand</span>(<span class="params">Command command, <span class="built_in">bool</span> flag</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        redoList.Add(command);</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">        &#123;</span><br><span class="line">            undoList.Clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 撤销的事件放入其中</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;command&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AppendUndoCommand</span>(<span class="params">Command command</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        undoList.Add(command);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获得已撤销的事件，并移除</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;flag&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Command <span class="title">GetUndoCommand</span>(<span class="params"><span class="keyword">out</span> <span class="built_in">bool</span> flag</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Command t = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (undoList.Count != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            t = undoList[undoList.Count - <span class="number">1</span>];</span><br><span class="line">            undoList.RemoveAt(undoList.Count - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获得已经做了的事件，并移除</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;flag&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Command <span class="title">GetRedoCommand</span>(<span class="params"><span class="keyword">out</span> <span class="built_in">bool</span> flag</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Command t = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (redoList.Count != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            t = redoList[redoList.Count - <span class="number">1</span>];</span><br><span class="line">            redoList.RemoveAt(redoList.Count - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">internal</span> <span class="keyword">void</span> <span class="title">RedoHelp</span>(<span class="params">Command command</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        AppendRedoCommand(command, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">internal</span> <span class="keyword">void</span> <span class="title">UndoHelp</span>(<span class="params">Command command</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        AppendUndoCommand(command);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Play game!</title>
    <url>//71ed4341.html</url>
    <content><![CDATA[<p>记录在玩的游戏<span id="more"></span></p>
<h1 id="玩的游戏"><a href="#玩的游戏" class="headerlink" title="玩的游戏"></a>玩的游戏</h1><h2 id="P5R（已通关）"><a href="#P5R（已通关）" class="headerlink" title="P5R（已通关）"></a>P5R（已通关）</h2><p>十船：8&#x2F;10</p>
<h3 id="23-12-14-新攻略了两个漂亮姐姐"><a href="#23-12-14-新攻略了两个漂亮姐姐" class="headerlink" title="23.12.14 新攻略了两个漂亮姐姐"></a>23.12.14 新攻略了两个漂亮姐姐</h3><p><img src="https://cdn.jsdelivr.net/gh/forestlyn/Drawing-bed/blog/%E5%A5%B3%E7%A5%9E%E5%BC%82%E9%97%BB%E5%BD%955%E7%9A%87%E5%AE%B6%E7%89%88%202023_12_14%2015_54_39.png" alt="女神异闻录5皇家版 2023_12_14 15_54_39"><img src="https://cdn.jsdelivr.net/gh/forestlyn/Drawing-bed/blog/%E5%A5%B3%E7%A5%9E%E5%BC%82%E9%97%BB%E5%BD%955%E7%9A%87%E5%AE%B6%E7%89%88%202023_12_14%2016_00_43.png" alt="女神异闻录5皇家版 2023_12_14 16_00_43"></p>
<h3 id="23-12-17-圣诞节8船跳嘿嘿"><a href="#23-12-17-圣诞节8船跳嘿嘿" class="headerlink" title="23.12.17 圣诞节8船跳嘿嘿"></a>23.12.17 圣诞节8船跳嘿嘿</h3><p><img src="https://cdn.jsdelivr.net/gh/forestlyn/Drawing-bed/blog/%E5%A5%B3%E7%A5%9E%E5%BC%82%E9%97%BB%E5%BD%955%E7%9A%87%E5%AE%B6%E7%89%88%202023_12_17%2018_06_10.png" alt="女神异闻录5皇家版 2023_12_17 18_06_10"></p>
<h3 id="23-12-29-结局全成就"><a href="#23-12-29-结局全成就" class="headerlink" title="23.12.29 结局全成就"></a>23.12.29 结局全成就</h3><p><img src="https://cdn.jsdelivr.net/gh/forestlyn/Drawing-bed/blog/C8FF4027AFC849521C0D9FA02734FD63.jpg" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/forestlyn/Drawing-bed/blog/%E5%A5%B3%E7%A5%9E%E5%BC%82%E9%97%BB%E5%BD%955%E7%9A%87%E5%AE%B6%E7%89%88%202023_12_29%2016_25_56.png" alt="女神异闻录5皇家版 2023_12_29 16_25_56"></p>
<h2 id="大逆转裁判"><a href="#大逆转裁判" class="headerlink" title="大逆转裁判"></a>大逆转裁判</h2><p>1.1：作为新手教程关，又臭又长</p>
<p>1.2：福尔摩斯太occ了，打不下去一点。。。</p>
<h2 id="夜雀食堂"><a href="#夜雀食堂" class="headerlink" title="夜雀食堂"></a>夜雀食堂</h2><p>很有意思，音游反应不过来qwq</p>
<h2 id="双人成行（已通关）"><a href="#双人成行（已通关）" class="headerlink" title="双人成行（已通关）"></a>双人成行（已通关）</h2><h3 id="23-12-30-和悦宝一起通关啦"><a href="#23-12-30-和悦宝一起通关啦" class="headerlink" title="23.12.30 和悦宝一起通关啦"></a>23.12.30 和悦宝一起通关啦</h3><p><img src="https://cdn.jsdelivr.net/gh/forestlyn/Drawing-bed/blog/%E5%8F%8C%E4%BA%BA%E6%88%90%E8%A1%8C%202023_12_30%2018_34_32.png" alt="双人成行 2023_12_30 18_34_32"></p>
<p><img src="https://cdn.jsdelivr.net/gh/forestlyn/Drawing-bed/blog/%E5%8F%8C%E4%BA%BA%E6%88%90%E8%A1%8C%202023_12_30%2018_39_11.png" alt="双人成行 2023_12_30 18_39_11"></p>
<h2 id="逆转检事"><a href="#逆转检事" class="headerlink" title="逆转检事"></a>逆转检事</h2><p>1-4：在法院都能跑掉。。真无语啊</p>
<p>（马赛克御剑真帅啊</p>
<p><img src="https://cdn.jsdelivr.net/gh/forestlyn/Drawing-bed/blog/QQ%E5%9B%BE%E7%89%8720240116140021.jpg" alt="QQ图片20240116140021"></p>
<h2 id="星露谷物语"><a href="#星露谷物语" class="headerlink" title="星露谷物语"></a>星露谷物语</h2><p>好玩爱玩，艾米丽我老婆！</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
  </entry>
  <entry>
    <title>设计模式：外观模式（Facade）</title>
    <url>//dd9eb0b9.html</url>
    <content><![CDATA[<p>外观模式（Facade）<span id="more"></span></p>
<h1 id="外观模式（Facade）"><a href="#外观模式（Facade）" class="headerlink" title="外观模式（Facade）"></a>外观模式（Facade）</h1><p>将系统内部的互动细节隐藏起来，提供一个简单的接口，客户端只需要通过这个接口就可以操作一个复杂的系统。</p>
<h2 id="client-客户端，用户"><a href="#client-客户端，用户" class="headerlink" title="client(客户端，用户)"></a>client(客户端，用户)</h2><p>从原本需要操作多个系统改为只用操作一个整合后的界面，即Facade。</p>
<h2 id="subSystem-子系统"><a href="#subSystem-子系统" class="headerlink" title="subSystem(子系统)"></a>subSystem(子系统)</h2><p>实现各个不同功能的系统，彼此之间需要交互。</p>
<h2 id="Facade（统一对外的界面）"><a href="#Facade（统一对外的界面）" class="headerlink" title="Facade（统一对外的界面）"></a>Facade（统一对外的界面）</h2><p>整合所有子系统的接口和功能，并提供高级界面（或接口）给客户端使用。</p>
<p>接收客户端的信息后，将信息传给子系统。</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式：状态模式（state)</title>
    <url>//bc23c9e0.html</url>
    <content><![CDATA[<p>状态模式的定义及其简单的游戏应用<span id="more"></span></p>
<h1 id="状态模式（State）"><a href="#状态模式（State）" class="headerlink" title="状态模式（State）"></a>状态模式（State）</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><h3 id="Context：状态拥有者，制定接口让外界改变状态或者得知状态已经改变。"><a href="#Context：状态拥有者，制定接口让外界改变状态或者得知状态已经改变。" class="headerlink" title="Context：状态拥有者，制定接口让外界改变状态或者得知状态已经改变。"></a>Context：状态拥有者，制定接口让外界改变状态或者得知状态已经改变。</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Context</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//表示当前状态</span></span><br><span class="line">    State m_state = null;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//外界接口：改变状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">Request</span><span class="params">(<span class="type">int</span> Value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_state.<span class="built_in">Handle</span>(Value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定类当前状态，本实例里用于state具体类里面进行状态转换操作用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">SetState</span><span class="params">(State theState)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Debug.<span class="built_in">Log</span>(<span class="string">&quot;Context.SetState:&quot;</span> + theState);</span><br><span class="line">        m_state = theState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="State：状态接口，负责规范Context在特定状态下要表现的行为"><a href="#State：状态接口，负责规范Context在特定状态下要表现的行为" class="headerlink" title="State：状态接口，负责规范Context在特定状态下要表现的行为"></a>State：状态接口，负责规范Context在特定状态下要表现的行为</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> abstract <span class="keyword">class</span> <span class="title class_">State</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//传入Context类对象，指定给m_Context，用来获取Context类对象信息或者操作Context对象</span></span><br><span class="line">    <span class="keyword">protected</span> Context m_Context = null;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">State</span><span class="params">(Context theContext)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_Context = theContext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> abstract <span class="type">void</span> <span class="title">Handle</span><span class="params">(<span class="type">int</span> value)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="ConcreteState：具体状态，继承State，实现具体状态"><a href="#ConcreteState：具体状态，继承State，实现具体状态" class="headerlink" title="ConcreteState：具体状态，继承State，实现具体状态"></a>ConcreteState：具体状态，继承State，实现具体状态</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteStateA</span> : State</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//确保Context对象是同一个(?)大概</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteStateA</span><span class="params">(Context theContext)</span> : base(theContext) &#123;</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="type">void</span> <span class="title">Handle</span><span class="params">(<span class="type">int</span> Value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Debug.<span class="built_in">Log</span>(<span class="string">&quot;ConcreteStateA.Handle&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Value &gt; <span class="number">10</span>)</span><br><span class="line">            m_Context.<span class="built_in">SetState</span>(<span class="keyword">new</span> <span class="built_in">ConcreteStateB</span>(m_Context));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteStateB</span> : State</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteStateB</span><span class="params">(Context theContext)</span> : base(theContext) &#123;</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="type">void</span> <span class="title">Handle</span><span class="params">(<span class="type">int</span> Value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Debug.<span class="built_in">Log</span>(<span class="string">&quot;ConcreteStateB.Handle&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Value &gt; <span class="number">20</span>)</span><br><span class="line">            m_Context.<span class="built_in">SetState</span>(<span class="keyword">new</span> <span class="built_in">ConcreteStateC</span>(m_Context));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteStateC</span> : State</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteStateC</span><span class="params">(Context theContext)</span> : base(theContext) &#123;</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="type">void</span> <span class="title">Handle</span><span class="params">(<span class="type">int</span> Value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Debug.<span class="built_in">Log</span>(<span class="string">&quot;ConcreteStateC.Handle&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Value &gt; <span class="number">30</span>)</span><br><span class="line">            m_Context.<span class="built_in">SetState</span>(<span class="keyword">new</span> <span class="built_in">ConcreteStateA</span>(m_Context));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="游戏应用-简单实现场景切换"><a href="#游戏应用-简单实现场景切换" class="headerlink" title="游戏应用:简单实现场景切换"></a>游戏应用:简单实现场景切换</h2><h3 id="场景控制：Context"><a href="#场景控制：Context" class="headerlink" title="场景控制：Context"></a>场景控制：Context</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.SceneManagement;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SceneStateController</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> ISceneState m_State;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">bool</span> m_bRunBegin = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//构造器,也可以不要(?)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SceneStateController</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">SetState</span><span class="params">(ISceneState State,string LoadSceneName)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Debug.<span class="built_in">Log</span>(<span class="string">&quot;SetState:&quot;</span> + State.<span class="built_in">ToString</span>());</span><br><span class="line">        m_bRunBegin = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//载入场景</span></span><br><span class="line">        <span class="built_in">LoadScene</span>(LoadSceneName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//前一个场景结束</span></span><br><span class="line">        <span class="keyword">if</span> (m_State != null)</span><br><span class="line">            m_State.<span class="built_in">StateEnd</span>();</span><br><span class="line"></span><br><span class="line">        m_State = State;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="type">void</span> <span class="title">LoadScene</span><span class="params">(string LoadSceneName)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (LoadSceneName == null || LoadSceneName.Length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        SceneManager.<span class="built_in">LoadScene</span>(LoadSceneName);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">StateUpdate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//通知新的State开始</span></span><br><span class="line">        <span class="keyword">if</span> (m_State != null &amp;&amp; m_bRunBegin == <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_State.<span class="built_in">StateBegin</span>();</span><br><span class="line">            m_bRunBegin = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_State != null)</span><br><span class="line">            m_State.<span class="built_in">StateUpdate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="场景接口：State"><a href="#场景接口：State" class="headerlink" title="场景接口：State"></a>场景接口：State</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ISceneState</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//状态名称</span></span><br><span class="line">    <span class="keyword">private</span> string m_StateName = <span class="string">&quot;ISceneState&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> string StateName</span><br><span class="line">    &#123;</span><br><span class="line">        get &#123; <span class="keyword">return</span> m_StateName; &#125;</span><br><span class="line">        set &#123; m_StateName = value; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//控制者</span></span><br><span class="line">    <span class="keyword">protected</span> SceneStateController m_Controller = null;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//建造者,建造时</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ISceneState</span><span class="params">(SceneStateController Controller)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_Controller = Controller;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="type">void</span> <span class="title">StateBegin</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//结束</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="type">void</span> <span class="title">StateEnd</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="type">void</span> <span class="title">StateUpdate</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> string <span class="title">ToString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> string.<span class="built_in">Format</span>(<span class="string">&quot;I_SceneState: StateName=&#123;0&#125;]&quot;</span>, StateName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="具体场景实现"><a href="#具体场景实现" class="headerlink" title="具体场景实现"></a>具体场景实现</h3><h4 id="开始场景"><a href="#开始场景" class="headerlink" title="开始场景"></a>开始场景</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StartState</span> : ISceneState</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StartState</span><span class="params">(SceneStateController Controller)</span>:base(Controller)</span></span><br><span class="line"><span class="function">    &#123;</span></span><br><span class="line">        <span class="keyword">this</span>.StateName = <span class="string">&quot;StartState&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="type">void</span> <span class="title">StateBegin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="comment">//进行游戏数据加载和初始化</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="type">void</span> <span class="title">StateUpdate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_Controller.<span class="built_in">SetState</span>(<span class="keyword">new</span> <span class="built_in">MainMenuState</span>(m_Controller), <span class="string">&quot;MainMenuScene&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="主菜单场景"><a href="#主菜单场景" class="headerlink" title="主菜单场景"></a>主菜单场景</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainMenuState</span> : ISceneState</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainMenuState</span><span class="params">(SceneStateController Controller)</span> : base(Controller)</span></span><br><span class="line"><span class="function">    &#123;</span></span><br><span class="line">        <span class="keyword">this</span>.StateName = <span class="string">&quot;MainMenuState&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="type">void</span> <span class="title">StateBegin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//开始</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="type">void</span> <span class="title">StateUpdate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//按下B进入战斗界面</span></span><br><span class="line">        <span class="keyword">if</span> (Input.<span class="built_in">GetKeyDown</span>(KeyCode.B))</span><br><span class="line">        &#123;</span><br><span class="line">            m_Controller.<span class="built_in">SetState</span>(<span class="keyword">new</span> <span class="built_in">BattleState</span>(m_Controller), <span class="string">&quot;BattleScene&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="战斗场景"><a href="#战斗场景" class="headerlink" title="战斗场景"></a>战斗场景</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BattleState</span> : ISceneState</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BattleState</span><span class="params">(SceneStateController Controller)</span> : base(Controller)</span></span><br><span class="line"><span class="function">    &#123;</span></span><br><span class="line">        <span class="keyword">this</span>.StateName = <span class="string">&quot;BattleState&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始,待补充</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="type">void</span> <span class="title">StateBegin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//结束，待补充</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="type">void</span> <span class="title">StateEnd</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="type">void</span> <span class="title">StateUpdate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//按下空格切换到主菜单界面</span></span><br><span class="line">        <span class="keyword">if</span> (Input.<span class="built_in">GetKeyDown</span>(KeyCode.Space))</span><br><span class="line">        &#123;</span><br><span class="line">            m_Controller.<span class="built_in">SetState</span>(<span class="keyword">new</span> <span class="built_in">MainMenuState</span>(m_Controller), <span class="string">&quot;MainMenuScene&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="GameLoop"><a href="#GameLoop" class="headerlink" title="GameLoop"></a>GameLoop</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GameLoop</span> : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//场景状态</span></span><br><span class="line">    SceneStateController m_SceneStateController = <span class="keyword">new</span> <span class="built_in">SceneStateController</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="type">void</span> <span class="title">Awake</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//转换场景不删除</span></span><br><span class="line">        GameObject.<span class="built_in">DontDestroyOnLoad</span>(<span class="keyword">this</span>.gameObject);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机数种子</span></span><br><span class="line">        UnityEngine.Random.<span class="built_in">InitState</span>((<span class="type">int</span>)DateTime.Now.Ticks);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="type">void</span> <span class="title">Start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//设置起始场景</span></span><br><span class="line">        m_SceneStateController.<span class="built_in">SetState</span>(<span class="keyword">new</span> <span class="built_in">StartState</span>(m_SceneStateController), <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="type">void</span> <span class="title">Update</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//使具体场景不需要继承MonoBehaviour也可以实现持续更新</span></span><br><span class="line">        m_SceneStateController.<span class="built_in">StateUpdate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h2><p>context是状态和外部的连接，状态的控制器，设置（改变）状态在这里面，里面有一个state类的实体，用来保存当前存在的状态。外部通过context来改变状态。</p>
<p>state是具体状态的父类，规范状态要做什么，以及引用了控制器实体。</p>
<p>具体状态通过控制器里面的函数切换状态，切换各个状态的具体条件也写在这里面，通过引用控制器实体里的函数来转换当前存在的状态。</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>记仇</title>
    <url>//43b64ead.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e139ae878502d8ebbd7f25958233bec91ef42d38e37d867646efad23bcd97606"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-up">
      <input class="hbe hbe-input-field hbe-input-field-up" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-up" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-up">内容已加密，请输入密码后阅读</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title>迷失岛</title>
    <url>//f5048c5d.html</url>
    <content><![CDATA[<p>迷失岛<span id="more"></span></p>
<h1 id="迷失岛"><a href="#迷失岛" class="headerlink" title="迷失岛"></a>迷失岛</h1><p><a href="https://www.bilibili.com/video/BV19a411i7Tw/?spm_id_from=333.788&vd_source=c92f5017d5fd5404445b257519e8126e">《迷失岛2》游戏框架开发01:实现场景转换｜Unity教程_哔哩哔哩_bilibili</a></p>
<p>先尝试自己制作，做到一半发现没有框架随手乱做做不下去了 跟随视频做了一遍 自己加上了还没放出来的存档功能</p>
<p>github:<a href="https://github.com/forestlyn/GameProject/tree/master/%E8%BF%B7%E5%A4%B1%E5%B2%9B">GameProject&#x2F;迷失岛 at master · forestlyn&#x2F;GameProject (github.com)</a></p>
<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>利用unity的多场景管理<a href="https://docs.unity.cn/cn/2018.4/Manual/MultiSceneEditing.html">多场景编辑 - Unity 手册</a>，将需要一直存在的脚本挂在<strong>管理器场景</strong>上。</p>
<h3 id="场景加载卸载"><a href="#场景加载卸载" class="headerlink" title="场景加载卸载"></a>场景加载卸载</h3><p>可利用协程实现异步加载 实现加载过渡动画</p>
<h2 id="背包系统"><a href="#背包系统" class="headerlink" title="背包系统"></a>背包系统</h2><p>MVC模式</p>
<p>分为 UI、逻辑、数据 三个部分 数据用ScriptableObject保存</p>
<p>利用Event，在数据改变时调用Call，需要改变的部分订阅事件，实现UI的改变。</p>
<p>个人感觉也可以利用GameManager保存各个部分统一调用更新UpdateUI函数，Event无法查看订阅事件的方法，阅读起来比较困难</p>
<h2 id="鼠标"><a href="#鼠标" class="headerlink" title="鼠标"></a>鼠标</h2><p>整个游戏均为鼠标点击互动，利用CursorManager来管理调用其它脚本事件，需要互动的物体加上碰撞体和对应的tag，点击物体时判断身上的tag进而获得其脚本调用对应方法。</p>
<h2 id="小游戏"><a href="#小游戏" class="headerlink" title="小游戏"></a>小游戏</h2><p>MVC模式</p>
<p>小游戏同样为MVC模式，分为UI，逻辑，数据三个部分 由于球和线使用动态生成，其数据均用ScriptableObject保存</p>
<p>利用Holder保存其当前的Ball和相邻的Holder，继承Interactive，判断其相邻的Holder有无空位 存在交换球</p>
<h2 id="存档"><a href="#存档" class="headerlink" title="存档"></a>存档</h2><h3 id="游戏内切换场景存档"><a href="#游戏内切换场景存档" class="headerlink" title="游戏内切换场景存档"></a>游戏内切换场景存档</h3><p>ObjectManager 每次加载场景前将存储的之前场景内可交互物体状态更新 </p>
<p>加载之后将场景内的物体状态更新为存储的状态</p>
<p>代码如下所示 利用event调用方法</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnBeforeSceneUnloadEvent</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="function">Prop prop <span class="keyword">in</span> <span class="title">FindObjectsOfType</span>&lt;<span class="title">Prop</span>&gt;())</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!propAvailableDic.ContainsKey(prop.propName))</span><br><span class="line">        &#123;</span><br><span class="line">            propAvailableDic.Add(prop.propName, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            prop.gameObject.SetActive(propAvailableDic[prop.propName]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="function">Interactive interactive <span class="keyword">in</span> <span class="title">FindObjectsOfType</span>&lt;<span class="title">Interactive</span>&gt;())</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!interactiveStateDic.ContainsKey(interactive.name))</span><br><span class="line">        &#123;</span><br><span class="line">            interactiveStateDic.Add(interactive.name, interactive.isDone);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            interactiveStateDic[interactive.name] = interactive.isDone;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnAfterSceneLoadedEvent</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="function">Prop prop <span class="keyword">in</span> <span class="title">FindObjectsOfType</span>&lt;<span class="title">Prop</span>&gt;())</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!propAvailableDic.ContainsKey(prop.propName))</span><br><span class="line">        &#123;</span><br><span class="line">            propAvailableDic.Add(prop.propName, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            prop.gameObject.SetActive(propAvailableDic[prop.propName]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="function">Interactive interactive <span class="keyword">in</span> <span class="title">FindObjectsOfType</span>&lt;<span class="title">Interactive</span>&gt;())</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!interactiveStateDic.ContainsKey(interactive.name))</span><br><span class="line">        &#123;</span><br><span class="line">            interactiveStateDic.Add(interactive.name, interactive.isDone);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            interactive.isDone = interactiveStateDic[interactive.name];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看代码时发现可交互物体mailbox也订阅了AfterSceneLoadedEvent事件，加载场景时存在数据依赖，可能出现问题</p>
<p>于是进行测试 代码如下</p>
<p>测试结果发现各个方法的调用存在先后关系 先订阅的方法先通知 后订阅的后通知 由于ObjectManager始终存在，订阅时间一定早于进入场景后再订阅的mailbox，因此一定是先进行mailbox状态的赋值再进行更新状态，不会出现问题。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">event</span> Action testevent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        testevent += Log;</span><br><span class="line">        testevent += Change;<span class="comment">//输出1 如果交换语句顺序 则输出2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Call</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        testevent.Invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Change</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Log</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.LogWarning(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>总结：event先通知先订阅的方法，后通知后订阅的方法</strong></p>
<h3 id="游戏外存档"><a href="#游戏外存档" class="headerlink" title="游戏外存档"></a>游戏外存档</h3><p>利用PlayerPrefabs和JsonUtility存档</p>
<p>发现List和dictionnary无法存档，上网查找需要写序列化脚本实现序列化</p>
<p>list无法直接序列化，利用脚本将其包装即可</p>
<p>而dictionary将其拆为两个list，利用ISerializationCallbackReceiver将其从list转换为dictionary或者dictionary转为list进行序列化</p>
<p>存档 读档利用两个event实现</p>
<p>SaveManager  <strong>实现list dictionary的load时忘记加上out导致未传递回值，读档失败</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SaveManager</span> : <span class="title">MySingleton</span>&lt;<span class="title">SaveManager</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Save</span>(<span class="params">Object data, <span class="built_in">string</span> key</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> jsonData = JsonUtility.ToJson(data);</span><br><span class="line">        PlayerPrefs.SetString(key, jsonData);</span><br><span class="line">        PlayerPrefs.Save();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Load</span>(<span class="params">Object data, <span class="built_in">string</span> key</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (PlayerPrefs.HasKey(key))</span><br><span class="line">            JsonUtility.FromJsonOverwrite(PlayerPrefs.GetString(key), data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Save</span>&lt;<span class="title">T</span>&gt;(<span class="params">List&lt;T&gt; data, <span class="built_in">string</span> key</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Debug.LogWarning(&quot;save list&quot;);</span></span><br><span class="line">        <span class="built_in">string</span> jsonData = JsonUtility.ToJson(<span class="keyword">new</span> Serialization&lt;T&gt;(data));</span><br><span class="line">        PlayerPrefs.SetString(key, jsonData);</span><br><span class="line">        PlayerPrefs.Save();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Load</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">out</span> List&lt;T&gt; data, <span class="built_in">string</span> key</span>)<span class="comment">//注意需要加上out</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Debug.LogWarning(&quot;load list&quot;);</span></span><br><span class="line">        <span class="keyword">if</span> (PlayerPrefs.HasKey(key))</span><br><span class="line">            data = JsonUtility.FromJson&lt;Serialization&lt;T&gt;&gt;(PlayerPrefs.GetString(key)).ToList();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            data = <span class="keyword">new</span> List&lt;T&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Save</span>&lt;<span class="title">TKey</span>, <span class="title">TValue</span>&gt;(<span class="params">Dictionary&lt;TKey, TValue&gt; data, <span class="built_in">string</span> key</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> jsonData = JsonUtility.ToJson(<span class="keyword">new</span> Serialization&lt;TKey,TValue&gt;(data));</span><br><span class="line">        PlayerPrefs.SetString(key, jsonData);</span><br><span class="line">        PlayerPrefs.Save();</span><br><span class="line">        Debug.LogWarning(<span class="string">&quot;prop save&quot;</span> + key + <span class="string">&quot; &quot;</span> + data.Count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Load</span>&lt;<span class="title">TKey</span>, <span class="title">TValue</span>&gt;(<span class="params"><span class="keyword">out</span> Dictionary&lt;TKey, TValue&gt; data, <span class="built_in">string</span> key</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (PlayerPrefs.HasKey(key))</span><br><span class="line">            data = JsonUtility.FromJson&lt;Serialization&lt;TKey, TValue&gt;&gt;(PlayerPrefs.GetString(key)).ToDictionary();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            data = <span class="keyword">new</span> Dictionary&lt;TKey, TValue&gt;();</span><br><span class="line">        Debug.LogWarning(PlayerPrefs.HasKey(key) + <span class="string">&quot;prop load&quot;</span> + key + <span class="string">&quot; &quot;</span> + data.Count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// List&lt;T&gt;</span></span><br><span class="line">[<span class="meta">System.Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Serialization</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">SerializeField</span>]</span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">ToList</span>()</span></span><br><span class="line">    &#123; <span class="keyword">return</span> target; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Serialization</span>(<span class="params">List&lt;T&gt; target</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dictionary&lt;TKey, TValue&gt;</span></span><br><span class="line">[<span class="meta">System.Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Serialization</span>&lt;<span class="title">TKey</span>, <span class="title">TValue</span>&gt; : <span class="title">ISerializationCallbackReceiver</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">SerializeField</span>]</span><br><span class="line">    <span class="keyword">private</span> List&lt;TKey&gt; keys;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">SerializeField</span>]</span><br><span class="line">    <span class="keyword">private</span> List&lt;TValue&gt; values;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Dictionary&lt;TKey, TValue&gt; target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dictionary&lt;TKey, TValue&gt; <span class="title">ToDictionary</span>()</span></span><br><span class="line">    &#123; <span class="keyword">return</span> target; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Serialization</span>(<span class="params">Dictionary&lt;TKey, TValue&gt; target</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnBeforeSerialize</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        keys = <span class="keyword">new</span> List&lt;TKey&gt;(target.Keys);</span><br><span class="line">        values = <span class="keyword">new</span> List&lt;TValue&gt;(target.Values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnAfterDeserialize</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> count = Mathf.Min(keys.Count, values.Count);</span><br><span class="line">        target = <span class="keyword">new</span> Dictionary&lt;TKey, TValue&gt;(count);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            target.Add(keys[i], values[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考：</p>
<p><a href="https://blog.csdn.net/Truck_Truck/article/details/78292390">(31条消息) Unity中JsonUtility对List和Dictionary的序列化_拿起键盘就是干的博客-CSDN博客</a></p>
<p><a href="https://docs.unity3d.com/ja/current/ScriptReference/ISerializationCallbackReceiver.html">UnityEngine.ISerializationCallbackReceiver - Unity 脚本参考 (unity3d.com)</a></p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>VisualStudio写一个dll</title>
    <url>//ba7c3468.html</url>
    <content><![CDATA[<p>VisualStudio写一个dll <span id="more"></span></p>
<h2 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h2><p>在visualstudio中创建了一个类库应用，这里我选择第一个</p>
<p><img src="https://cdn.jsdelivr.net/gh/forestlyn/Drawing-bed/blog/image-20231222145610923.png" alt="image-20231222145610923"></p>
<p>实现dll，我写的如下</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyDll</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyTestDll</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyTestDll</span>()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>点击[你的项目]名字项目右键点击，点击生成，再在打开项目所在文件夹</p>
<p><img src="https://cdn.jsdelivr.net/gh/forestlyn/Drawing-bed/blog/image-20231222153930611.png" alt="image-20231222153930611"></p>
<p>打开bin&#x2F;debug（或者release），找到你的项目名字.dll（我这里是MyDll.dll）,这就是你写的的dll啦，到此就实现了一个dll</p>
<p><img src="https://cdn.jsdelivr.net/gh/forestlyn/Drawing-bed/blog/image-20231222150705891.png" alt="image-20231222150705891"></p>
]]></content>
      <categories>
        <category>c#</category>
      </categories>
      <tags>
        <tag>c#</tag>
      </tags>
  </entry>
  <entry>
    <title>VisualStudio导入本地dll</title>
    <url>//4482fa7b.html</url>
    <content><![CDATA[<p>VisualStudio导入本地dll <span id="more"></span></p>
<h2 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h2><p>在visualstudio中创建了一个控制台应用</p>
<p>创建后打开项目所在目录，创建include文件夹</p>
<p><img src="https://cdn.jsdelivr.net/gh/forestlyn/Drawing-bed/blog/image-20231222151841691.png" alt="image-20231222151841691"></p>
<p>在里面复制想要使用的thing的dll和其依赖，这里复制了MyDll的dll</p>
<p> 再回到vs，选中项目右键-添加-项目引用-浏览，点击窗口右下方的浏览，在文件管理器中将依赖添加上，dll就会出现在下图所示的浏览中</p>
<p><img src="https://cdn.jsdelivr.net/gh/forestlyn/Drawing-bed/blog/image-20231222152219931.png" alt="image-20231222152219931"></p>
<p>点击前面对勾导入，就成功导入dll了，接下来就可以使用dll了</p>
<p>使用过程中有时候会会报错显示需要导入xx包，那是因为需要的依赖没导入，导入即可</p>
<h2 id="运行例子"><a href="#运行例子" class="headerlink" title="运行例子"></a>运行例子</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> MyDll;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleAppTestDll</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">            MyTestDll myTestDll = <span class="keyword">new</span> MyTestDll();</span><br><span class="line">            myTestDll.Print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行，成功运行</p>
<p><img src="https://cdn.jsdelivr.net/gh/forestlyn/Drawing-bed/blog/image-20231222152450539.png" alt="image-20231222152450539"></p>
]]></content>
      <categories>
        <category>c#</category>
      </categories>
      <tags>
        <tag>c#</tag>
      </tags>
  </entry>
  <entry>
    <title>制作一个久坐提醒器（windows）</title>
    <url>//fa6899ba.html</url>
    <content><![CDATA[<p>制作一个久坐提醒器（windows)<span id="more"></span></p>
<h1 id="制作一个久坐提醒器（windows"><a href="#制作一个久坐提醒器（windows" class="headerlink" title="制作一个久坐提醒器（windows)"></a>制作一个久坐提醒器（windows)</h1><p>在电脑面前坐着坐着常常一坐就是很久，总是忘记起来休息一下，所有想做个简单的久坐提醒器~</p>
<p>当然网上也有软件实现</p>
<p>不过这里想自己动手一下实现，也并不麻烦~</p>
<p><strong>这里利用bat和windows定时任务实现</strong></p>
<p>效果如下所示</p>
<p><img src="https://cdn.jsdelivr.net/gh/forestlyn/Drawing-bed/blog/image-20240110143928860.png" alt="image-20240110143928860"></p>
<h2 id="制作过程"><a href="#制作过程" class="headerlink" title="制作过程"></a>制作过程</h2><h2 id="制作bat文件"><a href="#制作bat文件" class="headerlink" title="制作bat文件"></a>制作bat文件</h2><p>新建一个文本文件，复制下面的内容，修改为bat文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chcp 65001</span><br><span class="line">msg %username% /time:10 &quot;休息一下吧，站起来走走~&quot;</span><br></pre></td></tr></table></figure>

<p>这里简单解释一下</p>
<p><code>1/time:10 </code>time后数字表示显示多长时间，单位是秒，</p>
<p><code>&quot;休息一下吧，站起来走走~&quot;</code>时显示的文字，可自行修改 </p>
<p>在命令行运行一下bat，有的电脑可能报错 msg命令不是内部或者外部命令，解决方法如下</p>
<ul>
<li>下载<a href="https://msdl.microsoft.com/download/symbols/msg.exe/BC9D4830c000/msg.exe">msg.exe</a>,修改为msg.exe,放在C:\Windows\System32下即可</li>
</ul>
<h2 id="新建定时任务"><a href="#新建定时任务" class="headerlink" title="新建定时任务"></a>新建定时任务</h2><p>打开控制面板，右上角搜索计划任务，点击打开，再点击创建基本任务</p>
<p><img src="C:\Users\27978\Desktop\N_2RV1_IVJI]I`Q`7WG6C7K.jpg" alt="img"></p>
<p><img src="C:\Users\27978\Desktop\image-20240110151424272.png" alt="image-20240110151424272"></p>
<p><img src="C:\Users\27978\Desktop\image-20240110162758254.png" alt="image-20240110162758254"></p>
<p><img src="C:\Users\27978\Desktop\image-20240110162817344.png" alt="image-20240110162817344"></p>
<p><img src="C:\Users\27978\Desktop\image-20240110162833014.png" alt="image-20240110162833014"></p>
<p>这里选择我们制作的脚本</p>
<p><img src="C:\Users\27978\Desktop\image-20240110162855307.png" alt="image-20240110162855307"></p>
<p>到现在完成，就可以每天提醒一次了，但是这和我们每小时提醒一次的需求不符。所以选择“当单击完成时打开任务属性对话框”，再点击完成，在随后打开的属性对话框中进一步设置属性。</p>
<p><img src="C:\Users\27978\Desktop\image-20240110162928435.png" alt="image-20240110162928435"></p>
<p>选择触发器，点击编辑，设定如下</p>
<p>点击编辑，设置重复任务间隔1小时，持续时间一天</p>
<p>点击确定，定时器就设定好啦。</p>
<p><img src="C:\Users\27978\Desktop\image-20240110163028910.png" alt="image-20240110163028910"></p>
<p>再查看任务计划程序库，选择自己制作的右键点击运行一下，再右键点击空白处，刷新界面</p>
<p>如果正确显示上次运行时间和下次运行时间，那就正确设置完成了~</p>
<p><img src="C:\Users\27978\Desktop\image-20240110163128413.png" alt="image-20240110163128413"></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://juejin.cn/post/6854573213352099847">如何在 Windows 上设置一个超超超超级简单的久坐提醒 - 掘金 (juejin.cn)</a></p>
]]></content>
  </entry>
</search>
